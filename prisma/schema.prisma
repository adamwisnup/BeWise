// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  first_name  String
  last_name   String?
  google_id   String?
  gender      Gender?
  avatar_link String?
  Booking     Booking[]
  Payment     Payment[]
  History     History[]

  @@map("users")
}

model CategoryProduct {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]

  @@map("category_products")
}

model NutritionFact {
  id              Int       @id @default(autoincrement())
  energy          Float
  saturated_fat   Float
  sugar           Float
  sodium          Float
  protein         Float
  fiber           Float
  fruit_vegetable Float
  Product         Product[]

  @@map("nutrition_facts")
}

model Label {
  id      Int       @id @default(autoincrement())
  name    String
  link    String
  Product Product[]

  @@map("labels")
}

model Product {
  id                  Int             @id @default(autoincrement())
  name                String
  brand               String
  photo               String
  category_product_id Int
  nutrition_fact_id   Int
  barcode             String
  price_a             Int
  price_b             Int
  label_id            Int
  label               Label           @relation(fields: [label_id], references: [id])
  categoryProduct     CategoryProduct @relation(fields: [category_product_id], references: [id])
  nutritionFact       NutritionFact   @relation(fields: [nutrition_fact_id], references: [id])
  History             History[]

  @@map("products")
}

model History {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  user       User     @relation(fields: [user_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
  created_at DateTime @default(now())

  @@map("histories")
}

model Subscription {
  id        Int       @id @default(autoincrement())
  plan_name String
  price     Int
  duration  Int
  bookings  Booking[]

  @@map("subscriptions")
}

model Booking {
  id              Int           @id @default(autoincrement())
  user_id         Int
  subscription_id Int
  start_date      DateTime
  end_date        DateTime
  status          BookingStatus
  created_at      DateTime      @default(now())
  updated_at      DateTime      @default(now()) @updatedAt
  user            User          @relation(fields: [user_id], references: [id])
  subscription    Subscription  @relation(fields: [subscription_id], references: [id])
  payments        Payment[]

  @@map("bookings")
}

model Payment {
  id             Int           @id @default(autoincrement())
  user_id        Int
  booking_id     Int
  transaction_id String        @unique
  amount         Float
  status         PaymentStatus
  payment_date   DateTime      @default(now())
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now()) @updatedAt
  User           User?         @relation(fields: [userId], references: [id])
  userId         Int?
  Booking        Booking?      @relation(fields: [bookingId], references: [id])
  bookingId      Int?

  @@map("payments")
}


model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@map("news")
}

enum Gender {
  Pria
  Wanita
}

enum BookingStatus {
  PENDING
  ACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
